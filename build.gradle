buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.9"
}

repositories {
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
    repositories {
        maven {
            name = "CurseForge"
            url = "https://minecraft.curseforge.com/api/maven/"
        }
    }
}

apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'jacoco'

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
        resources {
            srcDir 'src/api/resources'
        }
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
        compileClasspath += sourceSets.api.output
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}

version = project.minecraftVersion + "-" + System.getenv()["Version"]
group = modGroup
archivesBaseName = modBaseName

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

minecraft {
    version = project.minecraftVersion + "-" + project.forgeVersion
    runDir = "run"

    mappings = project.mcpVersion
}

dependencies {
    //Thaumcraft
    deobfCompile "thaumcraft:Thaumcraft:1.12.2:6.1.BETA26"
    deobfCompile "baubles:Baubles:1.12:1.5.2"
    
    // compile against the JEI API but do not include it at runtime
    deobfProvided "mezz.jei:jei_${project.exactMinecraftVersion}:${project.jeiVersion}:api"
    // at runtime, use the full JEI jar
    runtime "mezz.jei:jei_${project.exactMinecraftVersion}:${project.jeiVersion}"

    // unit testing
    testCompile 'junit:junit:4.11'
    testCompile "org.mockito:mockito-core:1.+"
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.5'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.5'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4-rule-agent', version: '1.6.5'

    testCompile 'org.assertj:assertj-core:3.9.0'

    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

    //Utilities
    compile 'com.intellij:annotations:+@jar'
    compile 'org.jgrapht:jgrapht-core:+'
    compile 'org.jgrapht:jgrapht-ext:+'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraftVersion

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraftVersion
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier 'api'
}

reobf {
    jar {}
    apiJar {}
}

javadoc {
    source += sourceSets.api.allSource
}

//TODO: Create curseforge project and set project id.
curseforge {
    if (System.getenv().CURSEAPIKEY != null && System.getenv().CURSERELEASETYPE != null)
    {
        apiKey = System.getenv().CURSEAPIKEY

        project {
            id = '000000'

            changelog = file('build/changelog.md')
            changelogType = 'markdown'
            releaseType = System.getenv().CURSERELEASETYPE

            addArtifact apiJar
        }
    }
    else
    {
        logger.lifecycle("Cannot run the CurseUpload sequence. No API-Key or release type has been provided.")
    }
}

task("createChangelog") {
    group = 'upload'

    doLast {
        def teamCityURL = "https://teamcity.minecolonies.com/"
        def file = new FileOutputStream("build/changelog.md")
        def out = new BufferedOutputStream(file)
        def changesXML = new XmlSlurper().parse(teamCityURL + "guestAuth/app/rest/changes?locator=build:(id:" + teamcity["teamcity.build.id"] + ")")

        def changes = changesXML.change
        println("createChangelog: Identified " + changes.size() + " changes to be written into the changelog.")

        out << "# Equivalency Changelog \n"
        out << "## Version: _" + version + "_ \n"

        if (changes.size() > 0) {
            for (int i = 0; i < changes.size(); i++) {
                def changeDetailsURL = teamCityURL + "guestAuth/app/rest/changes/id:" + changes[i].@id.text()
                def changeDetailsXml = new XmlSlurper().parse(changeDetailsURL)
                def changeComment = changeDetailsXml.comment.text().trim()

                out << "* " + changeComment + "\n"
            }
        } else {
            out << "No Changes detected!"
        }

        out.close()
    }
}

